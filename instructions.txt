[x] Create a new Rails app named portfolio.
[x] After you create the new app, switch to its folder. In the terminal, type: cd portfolio
[x] Install the gems specified in the Gemfile.
[x] Generate a controller named Pages.

Make a welcome page
[x] In the Pages controller, make an action named welcome.
[x] In the routes file, set the welcome action as the root route.
[] Set up the layout file (app/views/layouts/application.html.erb). The layout file lets you build a base view that contains all the common elements of your site, such as CSS files, the header, and the footer. The <%= yield %> defines the portion of the layout that child templates can fill in.
    [] Make sure both CSS URLs start with https. 
    [] Add CSS for Bootstrap. Follow the instructions here. Use the latest compiled and minified CSS, and not the optional theme.
    [] In the <head> below the <title>, add CSS for the Roboto web font. Follow the instructions here. Choose the styles Thin 100, Light 300, Medium 500, and Bold 700.

[] Create a view named app/views/pages/welcome.html.erb and style it in app/assets/stylesheets/pages.css.scss.
    [] Add a header section with a navigation menu and your name. 
    [] Add a main section with a tagline summarizing what you do and a ‘View my Work’ button. Add styles to pages.css.scss that targets the main section and sets the background to your own image. 
    []  Add a footer with links to your GitHub, LinkedIn, Twitter, and a copyright. Flaticon has free social icons here. 
To use images, first, upload your images to a hosting service of your choice. Then link to the images in your HTML and CSS.
[] Start a Rails server to preview the app in the browser. In the terminal, type:
 rails s -p 4001
This command starts a Rails server listening on port 4001. View the result by running the local server and visiting http://localhost:4001 in the browser.
[] Put your app under version control with Git. Then push it up to GitHub. Check out the instructions here.
[] Deploy your app to Heroku if you’re working on this locally. Check out the instructions here. Otherwise, check off this step and proceed with the next one.

Make a portfolio page
[] Take screenshots of the apps you’ve built in this course to showcase some of your work. Upload them to an image hosting service of your choice.
[] Make a new controller action and a new route for the portfolio page.
[] Create a view for the portfolio page and style it:
* The portfolio page has the same header and footer as the welcome page. Instead of writing the same code twice, refactor the header and footer from the welcome page and place them into application.html.erb so that they are available by all pages in the app.

[] Add a main section. In this section, use jQuery and the Unslider library to add a slideshow to top of the portfolio page. Follow the code examples in the Unslider docs to add the slideshow. Choose three screenshots of apps you’ve built and use these images in the slideshow. 
[] Save your JavaScript code to app/assets/javascripts/, and then include it the page as shown here. 
[] Add a supporting section. In this section create a grid of items for the apps you’ve built. 
[] For each item, include the screenshot of the app, a title and description, and a link to the live app on Heroku. 

[] In the header, use the link_to helper to generate links to the welcome page and portfolio page.
[] In the welcome page, use link_to to generate a link to the portfolio page.
[] Run the local web server to view the app at http://localhost:4001.
[] Commit the changes using Git, and push up to GitHub.
[] Deploy your app to Heroku if you’re working on this locally. Otherwise, check off this step and proceed with the next one.

Link to your blog
A blog is a good way to share your expertise and interests with others. It helps promote your portfolio as well as increase your online presence.
[] In the header, use link_to to generate a link to your blog if you have one.
[] If you don’t have a blog, Medium is a great blog-publishing platform to distribute your content and get discovered.
[] If you prefer not to blog about your portfolio, check off this step and proceed with the next one.
[] Run the local server to view the result at http://localhost:4001.
[] Commit the changes using Git, and push up to GitHub.
[] Deploy your app to Heroku if you’re working on this locally. Otherwise, check off this step and proceed with the next one.

Make an about page
[] Make a new controller action and a new route for the about page.
[] Create a view for the about page and style it:
    [] Add a picture of yourself. 
    [] Write a description of yourself. Describe your background, your goals, and your technical skills. 

[] In the header, use link_to to generate a link to the about page.
[] Run the local server to view the result at http://localhost:4001.
[] Commit the changes using Git, and push up to GitHub.
[] Deploy your app to Heroku if you’re working on this locally. Otherwise, check off this step and proceed with the next one.

Make a contact page
[] Make a new controller action and a new route for the contact page.
[] Create a view for the contact page and style it. Add links to places people can contact you online. A few options are:
    [] Email
    [] Facebook
    [] GitHub
    [] Google+
    [] LinkedIn
    [] Twitter

[] In the header, use link_to to generate a link to the contact page.
[] Run the local server to view the result at http://localhost:4001.
[] Commit the changes using Git, and push up to GitHub.
[] Deploy your app to Heroku if you’re working on this locally. Otherwise, check off this step and proceed with the next one.

Map a custom domain
[] Great job! You’ve built your own portfolio app in Rails!
If you’ve been deploying your app to Heroku thus far, you might be interested in adding your own custom domain (eg http://wwww.yourname.com). Check out the instructions here.
